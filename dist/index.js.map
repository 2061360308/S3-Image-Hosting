{"mappings":"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","sources":["src/index.ts","src/methods.ts","src/methods/base.ts","src/methods/metadata.ts","src/errors.ts","src/utils/base.ts","src/methods/album.ts","src/utils/classify.ts","src/utils/dataFile.ts","src/methods/tags.ts","src/methods/uploadImage.ts","src/methods/createAt.ts","src/methods/deleteImage.ts"],"sourcesContent":["import {\r\n  ImageType,\r\n  PaginatedResult,\r\n  Settings,\r\n  UploadImageResult,\r\n} from \"./types/index\";\r\nimport S3ImageHostingMethods from \"./methods\";\r\nimport { S3Client } from \"@aws-sdk/client-s3\";\r\nimport { Metadata } from \"./methods/metadata\";\r\n\r\nclass S3ImageHosting extends S3ImageHostingMethods {\r\n  settings: Settings;\r\n  client: S3Client;\r\n\r\n  constructor(settings: Settings) {\r\n    super();\r\n\r\n    this.settings = settings;\r\n\r\n    this.client = new S3Client({\r\n      region: settings.region,\r\n      endpoint: settings.endpoint,\r\n      credentials: {\r\n        accessKeyId: settings.accessKeyId,\r\n        secretAccessKey: settings.secretAccessKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  public isExistImage = async (key: string): Promise<boolean> => {\r\n    /**\r\n     * Check if the image exists in the bucket\r\n     * @param key The key of the image\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.isExistImageStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      key\r\n    );\r\n  };\r\n\r\n  public uploadImage = async (\r\n    fileData: Blob | Buffer | Uint8Array,\r\n    fileType: ImageType,\r\n    create: Date,\r\n    update: Date,\r\n    album: string,\r\n    tags: string[]\r\n  ): Promise<UploadImageResult> => {\r\n    /**\r\n     * Upload an image to the bucket\r\n     * @param fileData The image data  type: Blob | Buffer | Uint8Array\r\n     * @param fileType The image type  type: string (png | jpg | gif | bmp | webp | svg)\r\n     * @param create The creation date of the image  type: Date\r\n     * @param update The update date of the image  type: Date\r\n     * @param album The album of the image  type: string\r\n     * @param tags The tags of the image  type: string[]\r\n     * @returns A boolean value\r\n     */\r\n    const metadata = S3ImageHosting.createMatadataStatic(\r\n      create,\r\n      update,\r\n      album,\r\n      tags\r\n    );\r\n\r\n    return S3ImageHosting.uploadImageStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      fileData,\r\n      fileType,\r\n      metadata\r\n    );\r\n  };\r\n\r\n  public deleteImage = async (hash: string): Promise<boolean> => {\r\n    /**\r\n     * Delete an image from the bucket\r\n     * @param hash The key of the image\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.deleteImageStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      hash\r\n    );\r\n  };\r\n\r\n  public getImageMetadata = async (hash: string): Promise<Metadata> => {\r\n    /**\r\n     * Get the metadata of the image\r\n     * @param hash The hash of the image\r\n     * @returns A string\r\n     */\r\n\r\n    return await  S3ImageHosting.getImageMetadataStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      hash\r\n    );\r\n  }\r\n\r\n  public getImageSignedUrl = async (hash: string, expiresIn: number = 300): Promise<string> => {\r\n    /**\r\n     * Get the signed url of the image\r\n     * @param hash The hash of the image\r\n     * @param expiresIn The expiration time of the url, default 300 seconds\r\n     * @returns A string\r\n     */\r\n    return S3ImageHosting.getImageSignedUrlStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      hash,\r\n      expiresIn\r\n    );\r\n  };\r\n\r\n  public getAllAlbumNames = async (): Promise<string[]> => {\r\n    /**\r\n     * Get all album names\r\n     * @returns An array of strings\r\n     */\r\n    return S3ImageHosting.getAllAlbumNamesStatic(\r\n      this.client,\r\n      this.settings.bucket\r\n    );\r\n  };\r\n\r\n  public addAlbum = async (album: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Add albums\r\n     * @param album The album name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.addAlbumStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      album\r\n    );\r\n  };\r\n\r\n  public removeAlbum = async (album: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Remove albums\r\n     * @param album The album name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.removeAlbumStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      album\r\n    );\r\n  };\r\n\r\n  public listAlbumItems = async (\r\n    albumName: string,\r\n    page: number,\r\n    pageSize: number\r\n  ): Promise<PaginatedResult<string>> => {\r\n    /**\r\n     * List all images in the album\r\n     * @param albumName The album name\r\n     * @param page The page number\r\n     * @param pageSize The page size\r\n     * @returns A paginated result {page, pageSize, lastPage, data}\r\n     */\r\n    return S3ImageHosting.listAlbumItemsStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      albumName,\r\n      page,\r\n      pageSize\r\n    );\r\n  };\r\n\r\n  public albumAddImages = async (\r\n    albumName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Add images to the album\r\n     * @param albumName The album name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.albumAddImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      albumName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public albumRemoveImages = async (\r\n    albumName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Remove images from the album\r\n     * @param albumName The album name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.albumRemoveImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      albumName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public getAllTagNames = async (): Promise<string[]> => {\r\n    /**\r\n     * Get all tag names\r\n     * @returns An array of strings\r\n     */\r\n    return S3ImageHosting.getAllTagNamesStatic(\r\n      this.client,\r\n      this.settings.bucket\r\n    );\r\n  };\r\n\r\n  public addTag = async (tag: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Add tags\r\n     * @param tag The tag name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.addTagStatic(this.client, this.settings.bucket, tag);\r\n  };\r\n\r\n  public removeTag = async (tag: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Remove tags\r\n     * @param tag The tag name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.removeTagStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tag\r\n    );\r\n  };\r\n\r\n  public listTagItems = async (\r\n    tagName: string,\r\n    page: number,\r\n    pageSize: number\r\n  ): Promise<PaginatedResult<string>> => {\r\n    /**\r\n     * List all images in the tag\r\n     * @param tagName The tag name\r\n     * @param page The page number\r\n     * @param pageSize The page size\r\n     * @returns A paginated result {page, pageSize, lastPage, data}\r\n     */\r\n    return S3ImageHosting.listTagItemsStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tagName,\r\n      page,\r\n      pageSize\r\n    );\r\n  };\r\n\r\n  public tagAddImages = async (\r\n    tagName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Add images to the tag\r\n     * @param tagName The tag name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.tagAddImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tagName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public tagRemoveImages = async (\r\n    tagName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Remove images from the tag\r\n     * @param tagName The tag name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.tagRemoveImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tagName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public listCratedAtItems = async (\r\n    page: number,\r\n    pageSize: number\r\n  ): Promise<PaginatedResult<string>> => {\r\n    /**\r\n     * List all images by creation date\r\n     * @param page The page number\r\n     * @param pageSize The page size\r\n     * @returns A paginated result {page, pageSize, lastPage, data}\r\n     */\r\n    return S3ImageHosting.listCratedAtItemsStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      page,\r\n      pageSize\r\n    );\r\n  };\r\n}\r\n\r\nexport default S3ImageHosting;\r\n","import { isExistImage } from \"./methods/base\";\r\nimport { createMatadata } from \"./methods/metadata\";\r\nimport { uploadImageStatic } from \"./methods/uploadImage\";\r\nimport { deleteImageStatic } from \"./methods/deleteImage\";\r\n\r\nimport { getImageMetadata, getImageSignedUrl } from \"./methods/base\";\r\n\r\nimport {\r\n  getAllAlbumNames, // 从 相册 索引文件中获取所有相册名称\r\n  addAlbum, // 添加 相册\r\n  removeAlbum, // 删除 相册\r\n  listAlbumItems, // 列出 相册 中的所有图片\r\n  albumAddImages, // 向 相册 中添加图片\r\n  albumRemoveImages, // 从 相册 中删除图片\r\n} from \"./methods/album\";\r\n\r\nimport {\r\n  getAllTagNames, // 从 标签 索引文件中获取所有标签名称\r\n  addTag, // 添加 标签\r\n  removeTag, // 删除 标签\r\n  listTagItems, // 列出 标签 中的所有图片\r\n  tagAddImages, // 向 标签 中添加图片\r\n  tagRemoveImages, // 从 标签 中删除图片\r\n} from \"./methods/tags\";\r\n\r\nimport { listCratedAtItems } from \"./methods/createAt\";\r\n\r\nclass S3ImageHostingMethods {\r\n  public static isExistImageStatic = isExistImage;\r\n  public static createMatadataStatic = createMatadata;\r\n  public static uploadImageStatic = uploadImageStatic;\r\n  public static deleteImageStatic = deleteImageStatic;\r\n  public static getImageMetadataStatic = getImageMetadata;\r\n  public static getImageSignedUrlStatic = getImageSignedUrl;\r\n  public static getAllAlbumNamesStatic = getAllAlbumNames;\r\n  public static addAlbumStatic = addAlbum;\r\n  public static removeAlbumStatic = removeAlbum;\r\n  public static listAlbumItemsStatic = listAlbumItems;\r\n  public static albumAddImagesStatic = albumAddImages;\r\n  public static albumRemoveImagesStatic = albumRemoveImages;\r\n  public static getAllTagNamesStatic = getAllTagNames;\r\n  public static addTagStatic = addTag;\r\n  public static removeTagStatic = removeTag;\r\n  public static listTagItemsStatic = listTagItems;\r\n  public static tagAddImagesStatic = tagAddImages;\r\n  public static tagRemoveImagesStatic = tagRemoveImages;\r\n  public static listCratedAtItemsStatic = listCratedAtItems;\r\n}\r\n\r\nexport default S3ImageHostingMethods;\r\n","import { S3Client } from \"@aws-sdk/client-s3/dist-types/S3Client\";\r\nimport {\r\n  CopyObjectCommand,\r\n  DeleteObjectCommand,\r\n  DeleteObjectsCommand,\r\n  HeadObjectCommand,\r\n  ListObjectsV2Command,\r\n  GetObjectCommand,\r\n} from \"@aws-sdk/client-s3\";\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\nimport { generateMetadata } from \"./metadata\";\r\nimport { Metadata } from \"./metadata\";\r\n\r\nimport CryptoJS from \"crypto-js\";\r\nimport { MiddlewareStack } from \"@aws-sdk/types\";\r\nimport { HttpRequest } from \"@smithy/protocol-http\";\r\nimport { getAllAlbumNames } from \"./album\";\r\nimport { getAllTagNames } from \"./tags\";\r\nimport { ImageType } from \"../types\";\r\n\r\nexport const validImageTypes: Array<ImageType> = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"webp\", \"svg\"];\r\n\r\n// 是否存在图片\r\nexport const isExistImage = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  hash: string\r\n): Promise<boolean> => {\r\n  try {\r\n    const command = new ListObjectsV2Command({\r\n      Bucket: bucketName,\r\n      Prefix: hash,\r\n      MaxKeys: 1, // 只需要检查是否存在至少一个对象\r\n    });\r\n\r\n    const response = await client.send(command);\r\n    return !!response.Contents && response.Contents.length > 0;\r\n  } catch (error) {\r\n    console.error(\"Error checking objects with prefix:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 列出某个前缀下的所有文件\r\nexport const listFilesWithPrefix = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  prefix: string\r\n): Promise<Array<string>> => {\r\n  const command = new ListObjectsV2Command({\r\n    Bucket: bucketName,\r\n    Prefix: prefix,\r\n  });\r\n  const response = await client.send(command);\r\n  const files =\r\n    response.Contents?.map((item) => item.Key).filter(\r\n      (key): key is string => key !== undefined\r\n    ) || []; // 保留完整路径\r\n\r\n  // 按照从小到大的顺序排序\r\n  files.sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));\r\n\r\n  return files;\r\n};\r\n\r\n// 通过key判断文件是否存在\r\nexport const isFileExist = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  key: string\r\n): Promise<boolean> => {\r\n  /**\r\n   * 是否存在文件\r\n   */\r\n  try {\r\n    const command = new HeadObjectCommand({\r\n      Bucket: bucketName,\r\n      Key: key,\r\n    });\r\n    await client.send(command);\r\n    return true;\r\n  } catch (error: unknown) {\r\n    if (\r\n      error instanceof Error &&\r\n      (error.name === \"NotFound\" ||\r\n        (error as any).$metadata?.httpStatusCode === 404)\r\n    ) {\r\n      return false;\r\n    } else {\r\n      console.error(\"Error checking file existence:\", error);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n// 删除单个文件\r\nexport const deleteFiles = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  keys: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 删除文件\r\n   */\r\n  try {\r\n    for (let key of keys) {\r\n      const command = new DeleteObjectCommand({\r\n        Bucket: bucketName,\r\n        Key: key,\r\n      });\r\n      await client.send(command);\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error deleting files:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 删除某个前缀下的所有文件\r\nexport const deleteFilesWithPrefix = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  prefix: string\r\n): Promise<boolean> => {\r\n  /**\r\n   * 删除某个前缀下的所有文件\r\n   */\r\n\r\n  // 应要求删除多项文件时，需要在请求头中添加 Content-MD5 字段\r\n  const contentMd5Middleware = () => (next: any) => async (args: any) => {\r\n    const { request } = args;\r\n    if (HttpRequest.isInstance(request)) {\r\n      // const contentMD5 = md5Digest.toString(\"base64\");\r\n      const md5Digest = CryptoJS.MD5(request.body);\r\n      // 将 MD5 摘要编码为 Base64\r\n      const contentMD5 = CryptoJS.enc.Base64.stringify(md5Digest);\r\n      request.headers[\"Content-MD5\"] = contentMD5;\r\n    }\r\n    return next(args);\r\n  };\r\n\r\n  // 添加 Content-MD5 中间件\r\n  const addContentMd5Middleware = (stack: MiddlewareStack<any, any>) => {\r\n    stack.add(contentMd5Middleware(), {\r\n      step: \"build\",\r\n      tags: [\"SET_CONTENT_MD5\"],\r\n      name: \"contentMd5Middleware\",\r\n    });\r\n  };\r\n\r\n  // 移除 Content-MD5 中间件\r\n  const removeContentMd5Middleware = (stack: MiddlewareStack<any, any>) => {\r\n    stack.remove(\"contentMd5Middleware\");\r\n  };\r\n\r\n  try {\r\n    let continuationToken: string | undefined = undefined;\r\n    let keys: Array<string> = [];\r\n\r\n    // 列出所有匹配前缀的文件\r\n    do {\r\n      const listCommand: ListObjectsV2Command = new ListObjectsV2Command({\r\n        Bucket: bucketName,\r\n        Prefix: prefix,\r\n        ContinuationToken: continuationToken,\r\n      });\r\n      const listResponse = await client.send(listCommand);\r\n\r\n      listResponse.Contents?.forEach((item) => {\r\n        if (item.Key) {\r\n          keys.push(item.Key);\r\n        }\r\n      });\r\n\r\n      continuationToken = listResponse.NextContinuationToken;\r\n    } while (continuationToken);\r\n\r\n    // 批量删除文件\r\n    while (keys.length > 0) {\r\n      const chunk = keys.splice(0, 1000); // 每次最多删除1000个文件\r\n\r\n      const deleteCommand = new DeleteObjectsCommand({\r\n        Bucket: bucketName,\r\n        Delete: {\r\n          Objects: chunk.map((key) => ({ Key: key })),\r\n        },\r\n      });\r\n\r\n      addContentMd5Middleware(client.middlewareStack);\r\n      await client.send(deleteCommand);\r\n      removeContentMd5Middleware(client.middlewareStack);\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error deleting files with prefix:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 获取图片的元数据\r\nexport const getImageMetadata = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  hash: string\r\n): Promise<Metadata> => {\r\n  try {\r\n    const listCommand = new ListObjectsV2Command({\r\n      Bucket: bucketName,\r\n      Prefix: hash,\r\n      MaxKeys: 1, // 只需要检查是否存在至少一个对象\r\n    });\r\n    const listResponse = await client.send(listCommand);\r\n\r\n    if (listResponse.Contents && listResponse.Contents.length > 0) {\r\n      const item = listResponse.Contents[0];\r\n      if (item.Key) {\r\n        // 获取文件的元数据\r\n        const headCommand = new HeadObjectCommand({\r\n          Bucket: bucketName,\r\n          Key: item.Key,\r\n        });\r\n        const headResponse = await client.send(headCommand);\r\n\r\n        let metadata = generateMetadata(\r\n          headResponse.Metadata as Record<string, string>\r\n        );\r\n\r\n        // 验证文件的album和tags是否存在\r\n\r\n        /**\r\n         * 备注：\r\n         * album和tags可能已经被删除，但是还存在对应的文件元数据中\r\n         * 原因是考虑到删除时依次遍历其下所有图片元数据不太划算\r\n         * 所以在这时需要验证并更新当前的文件元数据，删除不存在的album和tags\r\n         */\r\n        let albumNames = await getAllAlbumNames(client, bucketName);\r\n        let tagNames = await getAllTagNames(client, bucketName);\r\n\r\n        if (metadata.album.length > 0 && !albumNames.includes(metadata.album)) {\r\n          metadata.album = \"\";\r\n        }\r\n\r\n        if (metadata.tags.length > 0) {\r\n          metadata.tags = metadata.tags.filter((tag) => tagNames.includes(tag));\r\n        }\r\n\r\n        const copyCommand = new CopyObjectCommand({\r\n          Bucket: bucketName,\r\n          CopySource: `${bucketName}/${item.Key}`,\r\n          Key: item.Key,\r\n          Metadata: metadata.pack(),\r\n          MetadataDirective: \"REPLACE\",\r\n        });\r\n\r\n        // 发送命令\r\n        await client.send(copyCommand);\r\n        return metadata;\r\n      }\r\n    }\r\n\r\n    throw new Error(\"Image not found\");\r\n  } catch (error) {\r\n    console.error(\"Error getting image metadata by prefix:\", error);\r\n    throw new Error(\"Image not found\");\r\n  }\r\n};\r\n\r\n// 通过hash获取图片的key\r\nexport const getImageKeyByHash = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  hash: string\r\n): Promise<string> => {\r\n  try {\r\n    const listCommand = new ListObjectsV2Command({\r\n      Bucket: bucketName,\r\n      Prefix: hash,\r\n      MaxKeys: 1, // 只需要检查是否存在至少一个对象\r\n    });\r\n    const listResponse = await client.send(listCommand);\r\n\r\n    if (listResponse.Contents && listResponse.Contents.length > 0) {\r\n      const item = listResponse.Contents[0];\r\n      if (item.Key) {\r\n        return item.Key;\r\n      }\r\n    }\r\n    throw new Error(\"Image not found\");\r\n  } catch (error) {\r\n    console.error(\"Error getting image metadata by prefix:\", error);\r\n    throw new Error(\"Image not found\");\r\n  }\r\n};\r\n\r\n// 为图片生成在线访问链接\r\nexport const getImageSignedUrl = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  hash: string,\r\n  expiresIn: number = 300 // 默认5分钟\r\n): Promise<string> => {\r\n  try {\r\n    const key = await getImageKeyByHash(client, bucketName, hash);\r\n    const command = new GetObjectCommand({\r\n      Bucket: bucketName,\r\n      Key: key,\r\n    });\r\n  \r\n    const signedUrl = await getSignedUrl(client, command, { expiresIn });\r\n    return signedUrl;\r\n  } catch (error) {\r\n    console.error(\"Error getting image signed URL:\", error);\r\n    throw new Error(\"Image not found\");\r\n  }\r\n};\r\n","/**\r\n * Pack And Unpack Metadata\r\n */\r\nimport {\r\n  TagNameOverflowError,\r\n  TagsOverflowError,\r\n  AlbumNameOverflowError,\r\n} from \"../errors\";\r\nimport { toBase64, fromBase64 } from \"../utils/base\";\r\nimport { IMetadata } from \"../types\";\r\n\r\nexport const generateMetadata = (data: Record<string, string>): Metadata => {\r\n  return new Metadata(\r\n    new Date(data.createdat),\r\n    new Date(data.updatedat),\r\n    fromBase64(data.album),\r\n    fromBase64(data.tags).split(\",\").filter(tag => tag !== \"\")\r\n  );\r\n};\r\n\r\nexport const createMatadata = (\r\n  create: Date,\r\n  update: Date,\r\n  album: string,\r\n  tags: string[]\r\n): Metadata => {\r\n  return new Metadata(create, update, album, tags);\r\n};\r\n\r\nexport class Metadata implements IMetadata {\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  album: string = \"\";\r\n  tags: Array<string> = [];\r\n\r\n  constructor(\r\n    create: Date,\r\n    update: Date,\r\n    album: string = \"\",\r\n    tags: Array<string> = []\r\n  ) {\r\n    this.createdAt = create;\r\n    this.updatedAt = update;\r\n\r\n    this.addTags(tags);\r\n    this.setAlbum(album);\r\n  }\r\n\r\n  addTags(tags: Array<string>): void {\r\n    if (this.tags.length + tags.length > 50) {\r\n      throw new TagsOverflowError();\r\n    }\r\n\r\n    for (const tag of tags) {\r\n      if (tag.length > 8) {\r\n        throw new TagNameOverflowError();\r\n      }\r\n    }\r\n\r\n    this.tags.push(...tags);\r\n  }\r\n\r\n  setAlbum(album: string): void {\r\n    if (album.length > 20) {\r\n      throw new AlbumNameOverflowError();\r\n    }\r\n    this.album = album;\r\n  }\r\n\r\n  pack(): Record<string, string> {\r\n    return {\r\n      createdAt: this.createdAt.toISOString(),\r\n      updatedAt: this.updatedAt.toISOString(),\r\n      album: toBase64(this.album),\r\n      tags: toBase64(this.tags.join(\",\")),\r\n    };\r\n  }\r\n}\r\n","export class ImageTypeError extends Error {\r\n  constructor(message: string = \"Invalid Image Type\") {\r\n    super(message);\r\n    this.name = \"ImageTypeError\";\r\n  }\r\n}\r\n\r\nexport class ImageAlreadyExistsError extends Error {\r\n  constructor(message: string = \"Image Already Exists\") {\r\n    super(message);\r\n    this.name = \"ImageAlreadyExistsError\";\r\n  }\r\n}\r\n\r\nexport class ImageNotFoundError extends Error {\r\n  constructor(message: string = \"Image Not Found\") {\r\n    super(message);\r\n    this.name = \"ImageNotFoundError\";\r\n  }\r\n}\r\n\r\nexport class TagsOverflowError extends Error {\r\n  constructor(message: string = \"Tags array cannot exceed 50 items\") {\r\n    super(message);\r\n    this.name = \"TagsOverflowError\";\r\n  }\r\n}\r\n\r\nexport class TagNameOverflowError extends Error {\r\n  constructor(message: string = \"Tag name cannot exceed 8 characters\") {\r\n    super(message);\r\n    this.name = \"TagNameOverflowError\";\r\n  }\r\n}\r\n\r\nexport class AlbumNameOverflowError extends Error {\r\n  constructor(message: string = \"Album name cannot exceed 20 characters\") {\r\n    super(message);\r\n    this.name = \"AlbumNameOverflowError\";\r\n  }\r\n}\r\n\r\nexport class NameAlreadyExistsError extends Error {\r\n  constructor(message: string = \"Album/Tags name already exists\") {\r\n    super(message);\r\n    this.name = \"NameAlreadyExistsError\";\r\n  }\r\n}\r\n\r\nexport class InvalidNameError extends Error {\r\n  constructor(message: string = \"Invalid Album/Tags Name\") {\r\n    super(message);\r\n    this.name = \"InvalidNameError\";\r\n  }\r\n}\r\n","/**\r\n * 基础工具函数\r\n * Basic Tool Functions\r\n */\r\n\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nexport const calculateHash = async (\r\n  fileData: Blob | Buffer | Uint8Array\r\n): Promise<string> => {\r\n  let wordArray;\r\n  if (fileData instanceof Uint8Array || fileData instanceof Buffer) {\r\n    wordArray = CryptoJS.lib.WordArray.create(fileData);\r\n  } else if (fileData instanceof Blob) {\r\n    const arrayBuffer = await fileData.arrayBuffer();\r\n    wordArray = CryptoJS.lib.WordArray.create(new Uint8Array(arrayBuffer));\r\n  } else {\r\n    throw new Error(\"Unsupported file data type\");\r\n  }\r\n  return CryptoJS.SHA256(wordArray).toString(CryptoJS.enc.Hex).substring(0, 16);\r\n};\r\n\r\nexport const toBase64 = (str: string): string => {\r\n  if (typeof window !== \"undefined\") {\r\n    // 浏览器环境\r\n    return btoa(str);\r\n  } else {\r\n    // Node.js 环境\r\n    return Buffer.from(str).toString('base64');\r\n  }\r\n};\r\n\r\nexport const fromBase64 = (str: string): string => {\r\n  if (typeof window !== \"undefined\") {\r\n    // 浏览器环境\r\n    return atob(str);\r\n  } else {\r\n    // Node.js 环境\r\n    return Buffer.from(str, 'base64').toString();\r\n  }\r\n};\r\n\r\n// 辅助函数：将流转换为字符串\r\nexport const streamToString = (stream: any): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const chunks: any[] = [];\r\n    stream.on(\"data\", (chunk: any) => chunks.push(chunk));\r\n    stream.on(\"error\", reject);\r\n    stream.on(\"end\", () => resolve(Buffer.concat(chunks).toString(\"utf-8\")));\r\n  });\r\n};","const indexFileKey = \".data/album.data\";\r\nconst dataFilesPrefix = \".data/album/\";\r\n\r\nimport { S3Client } from \"@aws-sdk/client-s3\";\r\nimport {\r\n  getAllNames,\r\n  add,\r\n  remove,\r\n  listItems,\r\n  addImages,\r\n  removeImages,\r\n} from \"../utils/classify\";\r\nimport { PaginatedResult } from \"../types/index.d\";\r\n\r\nexport const getAllAlbumNames = async (\r\n  client: S3Client,\r\n  bucketName: string\r\n): Promise<Array<string>> => {\r\n  /**\r\n   * 从 相册 索引文件中获取所有相册名称\r\n   */\r\n  return await getAllNames(client, bucketName, indexFileKey);\r\n};\r\n\r\nexport const addAlbum = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  addNames: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 添加 相册\r\n   */\r\n  return await add(client, bucketName, indexFileKey, addNames);\r\n};\r\n\r\nexport const removeAlbum = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  removeNames: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 删除 相册\r\n   */\r\n  return await remove(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    removeNames\r\n  );\r\n};\r\n\r\nexport const listAlbumItems = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  albumName: string,\r\n  page: number,\r\n  pageSize: number\r\n): Promise<PaginatedResult<string>> => {\r\n  /**\r\n   * 列出 相册 中的所有图片\r\n   */\r\n  return await listItems(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    albumName,\r\n    page,\r\n    pageSize\r\n  );\r\n};\r\n\r\nexport const albumAddImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  albumName: string,\r\n  imageHashs: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 向 相册 中添加图片\r\n   */\r\n  return await addImages(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    albumName,\r\n    imageHashs\r\n  );\r\n};\r\n\r\nexport const albumRemoveImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  albumName: string,\r\n  imageHashs: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 从 相册 中删除图片\r\n   */\r\n  return await removeImages(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    albumName,\r\n    imageHashs\r\n  );\r\n};\r\n\r\nexport default {\r\n  getAllAlbumNames, // 从 相册 索引文件中获取所有相册名称\r\n  addAlbum, // 添加 相册\r\n  removeAlbum, // 删除 相册\r\n  listAlbumItems, // 列出 相册 中的所有图片\r\n  albumAddImages, // 向 相册 中添加图片\r\n  albumRemoveImages, // 从 相册 中删除图片\r\n};\r\n","/**\r\n * 分类相关的基础方法（相册、标签）\r\n * Basic methods related to classification (album, tag)\r\n */\r\n\r\nimport { S3Client } from \"@aws-sdk/client-s3\";\r\nimport {\r\n  getDataFileItems,\r\n  updateDataFileItems,\r\n  listDateFilesItems,\r\n} from \"./dataFile\";\r\nimport { deleteFilesWithPrefix } from \"../methods/base\";\r\nimport { NameAlreadyExistsError, InvalidNameError } from \"../errors\";\r\nimport { PaginatedResult } from \"../types\";\r\n\r\n// 从 相册|标签 索引文件中获取所有 相册|标签 名称\r\nexport const getAllNames = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  indexFileKey: string\r\n): Promise<Array<string>> => {\r\n  let albumNames = await getDataFileItems(client, bucketName, indexFileKey);\r\n  return albumNames.filter((name) => name !== \"\");\r\n};\r\n\r\n// 添加 相册|标签\r\nexport const add = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  indexFileKey: string,\r\n  addNames: Array<string>\r\n): Promise<boolean> => {\r\n  if(!Array.isArray(addNames)) {\r\n    throw new InvalidNameError();\r\n  }\r\n  \r\n  // 判断相册是否已经存在\r\n  const allNames = await getAllNames(client, bucketName, indexFileKey);\r\n  for (let name of addNames) {\r\n    if (allNames.includes(name)) {\r\n      throw new NameAlreadyExistsError();\r\n    }\r\n  }\r\n\r\n  let result = await updateDataFileItems(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    \"add\",\r\n    addNames\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\n// 删除 相册|标签\r\nexport const remove = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  indexFileKey: string,\r\n  dataFilesPrefix: string,\r\n  removeNames: Array<string>\r\n): Promise<boolean> => {\r\n  // 判断相册是否存在\r\n  const allNames = await getAllNames(client, bucketName, indexFileKey);\r\n  for (let name of removeNames) {\r\n    if (!allNames.includes(name)) {\r\n      throw new InvalidNameError();\r\n    }\r\n  }\r\n\r\n  let result = await updateDataFileItems(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    \"remove\",\r\n    removeNames\r\n  );\r\n\r\n  // Todo: 不能保证所有数据文件都删除成功，数据不一致处理\r\n  for (let name of removeNames) {\r\n    let prefix = `${dataFilesPrefix}${name}`;\r\n    let _result = await deleteFilesWithPrefix(client, bucketName, prefix);\r\n    result = result && _result;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n// 列出 相册|标签 中的所有图片\r\nexport const listItems = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  indexFileKey: string,\r\n  dataFilesPrefix: string,\r\n  name: string,\r\n  page: number,\r\n  pageSize: number\r\n): Promise<PaginatedResult<string>> => {\r\n  // 判断 相册|标签 是否存在\r\n  const allNames = await getAllNames(client, bucketName, indexFileKey);\r\n\r\n  if (!allNames.includes(name)) {\r\n    throw new InvalidNameError();\r\n  }\r\n\r\n  let prefix = `${dataFilesPrefix}${name}`;\r\n  let result = await listDateFilesItems(\r\n    client,\r\n    bucketName,\r\n    prefix,\r\n    page,\r\n    pageSize\r\n  );\r\n  return result;\r\n};\r\n\r\n// 向 相册|标签 中添加图片\r\nexport const addImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  indexFileKey: string,\r\n  dataFilesPrefix: string,\r\n  name: string,\r\n  imageHashs: Array<string>\r\n): Promise<boolean> => {\r\n  // 判断 相册|标签 是否存在\r\n  const allNames = await getAllNames(client, bucketName, indexFileKey);\r\n  if (!allNames.includes(name)) {\r\n    throw new InvalidNameError();\r\n  }\r\n\r\n  // 计算图片分布的文件\r\n  let imagePaths: Record<string, Array<string>> = {};\r\n  for (let hash of imageHashs) {\r\n    let key = `${dataFilesPrefix}${name}/${hash.slice(0, 2)}.data`;\r\n    if (!imagePaths[key]) {\r\n      imagePaths[key] = [];\r\n    }\r\n    imagePaths[key].push(hash);\r\n  }\r\n\r\n  let result = true;\r\n  // Todo: 不能保证所有图片都添加成功，数据不一致处理\r\n  for (let key in imagePaths) {\r\n    let res = await updateDataFileItems(\r\n      client,\r\n      bucketName,\r\n      key,\r\n      \"add\",\r\n      imagePaths[key]\r\n    );\r\n    result = result && res;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n// 从 相册|标签 中删除图片\r\nexport const removeImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  indexFileKey: string,\r\n  dataFilesPrefix: string,\r\n  name: string,\r\n  imageHashs: Array<string>\r\n): Promise<boolean> => {\r\n  // 判断相册是否存在\r\n  const allNames = await getAllNames(client, bucketName, indexFileKey);\r\n  if (!allNames.includes(name)) {\r\n    throw new InvalidNameError();\r\n  }\r\n\r\n  // 计算图片分布的文件\r\n  let imagePaths: Record<string, Array<string>> = {};\r\n  for (let hash of imageHashs) {\r\n    let key = `${dataFilesPrefix}${name}/${hash.slice(0, 2)}.data`;\r\n    if (!imagePaths[key]) {\r\n      imagePaths[key] = [];\r\n    }\r\n    imagePaths[key].push(hash);\r\n  }\r\n\r\n  let result = true;\r\n  // Todo: 不能保证所有图片都添加成功，数据不一致处理\r\n  for (let key in imagePaths) {\r\n    let res = await updateDataFileItems(\r\n      client,\r\n      bucketName,\r\n      key,\r\n      \"add\",\r\n      imagePaths[key]\r\n    );\r\n    result = result && res;\r\n  }\r\n\r\n  return result;\r\n};","/**\r\n * 用于处理数据文件的工具函数\r\n * Tool functions for processing data files\r\n */\r\n\r\nimport {\r\n  DeleteObjectCommand,\r\n  GetObjectCommand,\r\n  ListObjectsV2Command,\r\n  PutObjectCommand,\r\n  S3Client,\r\n} from \"@aws-sdk/client-s3\";\r\nimport { isFileExist } from \"../methods/base\";\r\nimport { streamToString } from \"./base\";\r\nimport { PaginatedResult } from \"../types\";\r\n\r\nexport const decodeDataFileSourceContent = (body: string): Array<string> => {\r\n  /**\r\n   * 处理数据文件原始内容\r\n   */\r\n  const lines = body.split(\"\\n\");\r\n  if (lines[lines.length - 1] === \"\") {\r\n    lines.pop(); // 移除最后一个空字符串\r\n  }\r\n  return lines;\r\n};\r\n\r\nexport const encodeDataFileSourceContent = (data: Array<string>): string => {\r\n  /**\r\n   * 编码数据文件原始内容\r\n   */\r\n  return data.join(\"\\n\") + \"\\n\";\r\n};\r\n\r\nexport const getDataFilesSizes = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  prefix: string\r\n): Promise<Record<string, number>> => {\r\n  /**\r\n   * 给出前缀，返回该前缀下的所有数据文件的大小(字节)\r\n   */\r\n  const sizes: Record<string, number> = {};\r\n  let continuationToken: string | undefined = undefined;\r\n\r\n  do {\r\n    const command: ListObjectsV2Command = new ListObjectsV2Command({\r\n      Bucket: bucketName,\r\n      Prefix: prefix,\r\n      ContinuationToken: continuationToken,\r\n      MaxKeys: 1000, // 设置每个请求返回的最大对象数量\r\n    });\r\n    const response = await client.send(command);\r\n\r\n    response.Contents?.forEach((item) => {\r\n      if (item.Key && item.Size !== undefined) {\r\n        sizes[item.Key] = item.Size;\r\n      }\r\n    });\r\n\r\n    continuationToken = response.NextContinuationToken;\r\n  } while (continuationToken);\r\n\r\n  return sizes;\r\n};\r\n\r\nexport const getDataFilesItemsNums = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  prefix: string\r\n): Promise<Record<string, number>> => {\r\n  /**\r\n   * 给出前缀，返回该前缀下的所有数据文件的条目数\r\n   */\r\n  let sizes = await getDataFilesSizes(client, bucketName, prefix);\r\n  let nums: Record<string, number> = {};\r\n\r\n  for (let key in sizes) {\r\n    nums[key] = Math.ceil(sizes[key] / 17);\r\n  }\r\n\r\n  // 按照键对结果进行排序\r\n  const sortedKeys = Object.keys(nums).sort((a, b) =>\r\n    a.localeCompare(b, undefined, { numeric: true })\r\n  );\r\n  const sortedNums: Record<string, number> = {};\r\n  for (let key of sortedKeys) {\r\n    sortedNums[key] = nums[key];\r\n  }\r\n\r\n  return sortedNums;\r\n};\r\n\r\nexport const getDataFileItems = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  key: string\r\n): Promise<Array<string>> => {\r\n  /**\r\n   * 获取数据文件中的所有条目\r\n   */\r\n  let hasFile = await isFileExist(client, bucketName, key);\r\n\r\n  if (!hasFile) {\r\n    return [];\r\n  } else {\r\n    const command = new GetObjectCommand({\r\n      Bucket: bucketName,\r\n      Key: key,\r\n    });\r\n    const response = await client.send(command);\r\n    const body = await streamToString(response.Body);\r\n    return decodeDataFileSourceContent(body);\r\n  }\r\n};\r\n\r\nexport const updateDataFileItems = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  key: string,\r\n  type: \"add\" | \"remove\",\r\n  value: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 更新数据文件中的条目\r\n   */\r\n  // 获取原始数据\r\n  let data = await getDataFileItems(client, bucketName, key);\r\n\r\n  // 更新数据\r\n  if (type === \"add\") {\r\n    data = data.concat(value);\r\n  } else if (type === \"remove\") {\r\n    data = data.filter((item) => !value.includes(item));\r\n  }\r\n\r\n  // 如果数据为空，直接删除远程文件\r\n  if (data.length === 0) {\r\n    try {\r\n      const command = new DeleteObjectCommand({\r\n        Bucket: bucketName,\r\n        Key: key,\r\n      });\r\n      await client.send(command);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting data file ${key}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 如果数据不为空，则需要上传数据\r\n  try {\r\n    const uploadParams = {\r\n      Bucket: bucketName,\r\n      Key: key,\r\n      Body: encodeDataFileSourceContent(data),\r\n    };\r\n\r\n    const command = new PutObjectCommand(uploadParams);\r\n    await client.send(command);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error updating metadata global file:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const listDateFilesItems = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  prefix: string,\r\n  page: number,\r\n  pageSize: number\r\n): Promise<PaginatedResult<string>> => {\r\n  let result: Array<string> = [];\r\n\r\n  let start = (page - 1) * pageSize;\r\n  let end = page * pageSize;\r\n\r\n  let dataFilesItemsNums = await getDataFilesItemsNums(\r\n    client,\r\n    bucketName,\r\n    prefix\r\n  );\r\n\r\n  const totalNum = Object.values(dataFilesItemsNums).reduce(\r\n    (acc, num) => acc + num,\r\n    0\r\n  );\r\n\r\n  let currentCount = 0;\r\n  let hasMoreData = false;\r\n\r\n  for (let fileKey in dataFilesItemsNums) {\r\n    let num = dataFilesItemsNums[fileKey];\r\n\r\n    if (currentCount + num > start) {\r\n      let fileStartIndex = Math.max(0, start - currentCount);\r\n      let fileEndIndex = Math.min(num, end - currentCount);\r\n\r\n      // 获取文件内容\r\n      const lines = await getDataFileItems(client, bucketName, fileKey);\r\n\r\n      // 获取所需范围的数据\r\n      result.push(...lines.slice(fileStartIndex, fileEndIndex));\r\n\r\n      if (result.length >= pageSize) {\r\n        hasMoreData = currentCount + num > end;\r\n        break;\r\n      }\r\n    }\r\n\r\n    currentCount += num;\r\n  }\r\n\r\n  result = result.slice(0, pageSize); // 确保结果不超过pageSize\r\n\r\n  const lastPage = page * pageSize < totalNum;\r\n\r\n  return {\r\n    page,\r\n    pageSize,\r\n    lastPage,\r\n    data: result,\r\n  };\r\n};\r\n","const indexFileKey = \".data/tag.data\";\r\nconst dataFilesPrefix = \".data/tag/\";\r\n\r\nimport { S3Client } from \"@aws-sdk/client-s3\";\r\nimport {\r\n  getAllNames,\r\n  add,\r\n  remove,\r\n  listItems,\r\n  addImages,\r\n  removeImages,\r\n} from \"../utils/classify\";\r\nimport { PaginatedResult } from \"../types/index.d\";\r\n\r\nexport const getAllTagNames = async (\r\n  client: S3Client,\r\n  bucketName: string\r\n): Promise<Array<string>> => {\r\n  /**\r\n   * 从 标签 索引文件中获取所有标签名称\r\n   */\r\n  return await getAllNames(client, bucketName, indexFileKey);\r\n};\r\n\r\nexport const addTag = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  addNames: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 添加 标签\r\n   */\r\n  return await add(client, bucketName, indexFileKey, addNames);\r\n};\r\n\r\nexport const removeTag = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  removeNames: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 删除 标签\r\n   */\r\n  return await remove(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    removeNames\r\n  );\r\n};\r\n\r\nexport const listTagItems = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  TagName: string,\r\n  page: number,\r\n  pageSize: number\r\n): Promise<PaginatedResult<string>> => {\r\n  /**\r\n   * 列出 标签 中的所有图片\r\n   */\r\n  return await listItems(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    TagName,\r\n    page,\r\n    pageSize\r\n  );\r\n};\r\n\r\nexport const tagAddImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  TagName: string,\r\n  imageHashs: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 向 标签 中添加图片\r\n   */\r\n  return await addImages(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    TagName,\r\n    imageHashs\r\n  );\r\n};\r\n\r\nexport const tagRemoveImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  TagName: string,\r\n  imageHashs: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 从 标签 中删除图片\r\n   */\r\n  return await removeImages(\r\n    client,\r\n    bucketName,\r\n    indexFileKey,\r\n    dataFilesPrefix,\r\n    TagName,\r\n    imageHashs\r\n  );\r\n};\r\n\r\nexport default {\r\n  getAllTagNames, // 从 标签 索引文件中获取所有标签名称\r\n  addTag, // 添加 标签\r\n  removeTag, // 删除 标签\r\n  listTagItems, // 列出 标签 中的所有图片\r\n  tagAddImages, // 向 标签 中添加图片\r\n  tagRemoveImages, // 从 标签 中删除图片\r\n};\r\n","import { S3Client } from \"@aws-sdk/client-s3/dist-types/S3Client\";\r\n\r\nimport { ImageType } from \"../types/index.d\";\r\nimport { PutObjectCommand } from \"@aws-sdk/client-s3\";\r\n\r\nimport { Metadata } from \"./metadata\";\r\n\r\nimport { calculateHash } from \"../utils/base\";\r\nimport { isExistImage, validImageTypes } from \"./base\";\r\nimport { ImageAlreadyExistsError, ImageTypeError } from \"../errors\";\r\nimport { createdAtAddImages } from \"./createAt\";\r\nimport { albumAddImages } from \"./album\";\r\nimport { tagAddImages } from \"./tags\";\r\nimport { UploadImageResult } from \"../types/index.d\";\r\n\r\nexport const uploadImageStatic = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  fileData: Blob | Buffer | Uint8Array,\r\n  fileType: ImageType,\r\n  metadata: Metadata\r\n): Promise<UploadImageResult> => {\r\n  try {\r\n    const hash = await calculateHash(fileData);\r\n\r\n    // Check if image already exists\r\n    // 不管后缀是什么，只要hash相同，就认为是同一张图片\r\n    if (await isExistImage(client, bucketName, hash)) {\r\n      throw new ImageAlreadyExistsError();\r\n    }\r\n\r\n    // Check if image type is valid\r\n    if (!validImageTypes.includes(fileType as ImageType)) {\r\n      throw new ImageTypeError();\r\n    }\r\n\r\n    // 更新createAt数据索引\r\n    let createAt_result = await createdAtAddImages(client, bucketName, [hash]);\r\n\r\n    if (!createAt_result) {\r\n      throw new Error(\"Error updating createdAt data index\");\r\n    }\r\n\r\n    // 如果有相册数据，更新相册数据索引\r\n    if (metadata.album.length > 0) {\r\n      // 更新album数据索引\r\n      let album_result = await albumAddImages(\r\n        client,\r\n        bucketName,\r\n        metadata.album,\r\n        [hash]\r\n      );\r\n\r\n      if (!album_result) {\r\n        throw new Error(\"Error updating album data index\");\r\n      }\r\n    }\r\n\r\n    // 如果有标签数据，更新标签数据索引\r\n    if (metadata.tags.length > 0) {\r\n      // 更新tag数据索引\r\n      for (let tag of metadata.tags) {\r\n        let tag_result = await tagAddImages(client, bucketName, tag, [hash]);\r\n\r\n        if (!tag_result) {\r\n          throw new Error(\"Error updating tag data index\");\r\n        }\r\n      }\r\n    }\r\n\r\n    const uploadParams = {\r\n      Bucket: bucketName,\r\n      Key: `${hash}.${fileType}`,\r\n      Body: fileData,\r\n      Metadata: metadata.pack(),\r\n    };\r\n\r\n    const command = new PutObjectCommand(uploadParams);\r\n    const response = await client.send(command);\r\n\r\n    return {\r\n      success: true,\r\n      metadata: metadata,\r\n      hash: hash,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error uploading image:\", error);\r\n    return {\r\n      success: false,\r\n    };\r\n  }\r\n};\r\n","import { S3Client } from \"@aws-sdk/client-s3\";\r\nimport { listDateFilesItems, updateDataFileItems } from \"../utils/dataFile\";\r\nimport { PaginatedResult } from \"../types/index.d\";\r\n\r\nconst dataFilesPrefix = \".data/createdAt/\";\r\n\r\nexport const listCratedAtItems = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  page: number,\r\n  pageSize: number\r\n): Promise<PaginatedResult<string>> => {\r\n  /**\r\n   * 按照创建时间顺序列出图片\r\n   */\r\n  let prefix = dataFilesPrefix;\r\n  let result = await listDateFilesItems(\r\n    client,\r\n    bucketName,\r\n    prefix,\r\n    page,\r\n    pageSize\r\n  );\r\n  return result;\r\n};\r\n\r\nexport const createdAtAddImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  imageHashs: Array<string>\r\n): Promise<boolean> => {\r\n  /**\r\n   * 添加 图片 到 创建时间数据文件\r\n   */\r\n\r\n  // 获取当前日期, 年月日\r\n  const date = new Date();\r\n  let key = `${dataFilesPrefix}${date.toISOString().split(\"T\")[0]}.data`;\r\n  let result = await updateDataFileItems(\r\n    client,\r\n    bucketName,\r\n    key,\r\n    \"add\",\r\n    imageHashs\r\n  );\r\n  return result;\r\n};\r\n\r\nexport const createdAtRemoveImages = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  imageHashs: Array<string>,\r\n  createAt: Date\r\n): Promise<boolean> => {\r\n  /**\r\n   * 从创建时间数据文件中删除图片\r\n   */\r\n\r\n  // 获取日期, 年月日\r\n  let key = `${dataFilesPrefix}${createAt.toISOString().split(\"T\")[0]}.data`;\r\n  let result = await updateDataFileItems(\r\n    client,\r\n    bucketName,\r\n    key,\r\n    \"remove\",\r\n    imageHashs\r\n  );\r\n  return result;\r\n}\r\n","import { S3Client, DeleteObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { ImageNotFoundError } from \"../errors\";\r\nimport { getImageMetadata, getImageKeyByHash, isExistImage } from \"./base\";\r\nimport { Metadata } from \"./metadata\";\r\nimport { createdAtRemoveImages } from \"./createAt\";\r\nimport { albumRemoveImages } from \"./album\";\r\nimport { tagRemoveImages } from \"./tags\";\r\n\r\nexport const deleteImageStatic = async (\r\n  client: S3Client,\r\n  bucketName: string,\r\n  hash: string\r\n): Promise<boolean> => {\r\n  try {\r\n    if (!(await isExistImage(client, bucketName, hash))) {\r\n      throw new ImageNotFoundError();\r\n    }\r\n\r\n    let metadata: Metadata = await getImageMetadata(client, bucketName, hash);\r\n\r\n    // 更新createAt数据索引\r\n    let createAt_result = await createdAtRemoveImages(\r\n      client,\r\n      bucketName,\r\n      [hash],\r\n      metadata.createdAt\r\n    );\r\n    if (!createAt_result) {\r\n      throw new Error(\"Error updating createdAt data index\");\r\n    }\r\n\r\n    // 如果有相册数据，更新相册数据索引\r\n    if (metadata.album.length > 0) {\r\n      // 更新album数据索引\r\n      let album_result = await albumRemoveImages(\r\n        client,\r\n        bucketName,\r\n        metadata.album,\r\n        [hash]\r\n      );\r\n\r\n      if (!album_result) {\r\n        throw new Error(\"Error updating album data index\");\r\n      }\r\n    }\r\n\r\n    // 如果有标签数据，更新标签数据索引\r\n    if (metadata.tags.length > 0) {\r\n      // 更新tag数据索引\r\n      for (let tag of metadata.tags) {\r\n        let tag_result = await tagRemoveImages(client, bucketName, tag, [hash]);\r\n        if (!tag_result) {\r\n          throw new Error(\"Error updating tag data index\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // 删除图片, 先得到图片的key\r\n\r\n    let key = await getImageKeyByHash(client, bucketName, hash);\r\n\r\n    const command = new DeleteObjectCommand({\r\n      Bucket: bucketName,\r\n      Key: key,\r\n    });\r\n    await client.send(command);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error deleting image:\", error);\r\n    return false;\r\n  }\r\n};\r\n"],"names":[],"version":3,"file":"index.js.map"}