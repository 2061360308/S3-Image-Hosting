{"mappings":"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","sources":["src/src/errors.ts","src/src/utils/base.ts","src/src/methods/metadata.ts","src/src/utils/dataFile.ts","src/src/utils/classify.ts","src/src/methods/album.ts","src/src/methods/tags.ts","src/src/methods/base.ts","src/src/methods/createAt.ts","src/src/methods/uploadImage.ts","src/src/methods/deleteImage.ts","src/src/methods.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,"import {\r\n  ImageType,\r\n  PaginatedResult,\r\n  Settings,\r\n  UploadImageResult,\r\n} from \"types/index.d\";\r\nimport S3ImageHostingMethods from \"./methods\";\r\nimport { S3Client } from \"@aws-sdk/client-s3\";\r\nimport { Metadata } from \"./methods/metadata\";\r\n\r\nclass S3ImageHosting extends S3ImageHostingMethods {\r\n  public readonly version: string = \"{{{ VERSION }}}\";\r\n\r\n  settings: Settings;\r\n  client: S3Client;\r\n\r\n  constructor(settings: Settings) {\r\n    super();\r\n\r\n    this.settings = settings;\r\n\r\n    this.client = new S3Client({\r\n      region: settings.region,\r\n      endpoint: settings.endpoint,\r\n      credentials: {\r\n        accessKeyId: settings.accessKeyId,\r\n        secretAccessKey: settings.secretAccessKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  public isExistImage = async (key: string): Promise<boolean> => {\r\n    /**\r\n     * Check if the image exists in the bucket\r\n     * @param key The key of the image\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.isExistImageStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      key\r\n    );\r\n  };\r\n\r\n  public uploadImage = async (\r\n    fileData: Blob | Buffer | Uint8Array,\r\n    fileType: ImageType,\r\n    create: Date,\r\n    update: Date,\r\n    album: string,\r\n    tags: string[]\r\n  ): Promise<UploadImageResult> => {\r\n    /**\r\n     * Upload an image to the bucket\r\n     * @param fileData The image data  type: Blob | Buffer | Uint8Array\r\n     * @param fileType The image type  type: string (png | jpg | gif | bmp | webp | svg)\r\n     * @param create The creation date of the image  type: Date\r\n     * @param update The update date of the image  type: Date\r\n     * @param album The album of the image  type: string\r\n     * @param tags The tags of the image  type: string[]\r\n     * @returns A boolean value\r\n     */\r\n    const metadata = S3ImageHosting.createMatadataStatic(\r\n      create,\r\n      update,\r\n      album,\r\n      tags\r\n    );\r\n\r\n    return S3ImageHosting.uploadImageStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      fileData,\r\n      fileType,\r\n      metadata\r\n    );\r\n  };\r\n\r\n  public deleteImage = async (hash: string): Promise<boolean> => {\r\n    /**\r\n     * Delete an image from the bucket\r\n     * @param hash The key of the image\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.deleteImageStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      hash\r\n    );\r\n  };\r\n\r\n  public getImageMetadata = async (hash: string): Promise<Metadata> => {\r\n    /**\r\n     * Get the metadata of the image\r\n     * @param hash The hash of the image\r\n     * @returns A string\r\n     */\r\n\r\n    return await  S3ImageHosting.getImageMetadataStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      hash\r\n    );\r\n  }\r\n\r\n  public getImageSignedUrl = async (hash: string, expiresIn: number = 300): Promise<string> => {\r\n    /**\r\n     * Get the signed url of the image\r\n     * @param hash The hash of the image\r\n     * @param expiresIn The expiration time of the url, default 300 seconds\r\n     * @returns A string\r\n     */\r\n    return S3ImageHosting.getImageSignedUrlStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      hash,\r\n      expiresIn\r\n    );\r\n  };\r\n\r\n  public getAllAlbumNames = async (): Promise<string[]> => {\r\n    /**\r\n     * Get all album names\r\n     * @returns An array of strings\r\n     */\r\n    return S3ImageHosting.getAllAlbumNamesStatic(\r\n      this.client,\r\n      this.settings.bucket\r\n    );\r\n  };\r\n\r\n  public addAlbum = async (album: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Add albums\r\n     * @param album The album name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.addAlbumStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      album\r\n    );\r\n  };\r\n\r\n  public removeAlbum = async (album: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Remove albums\r\n     * @param album The album name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.removeAlbumStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      album\r\n    );\r\n  };\r\n\r\n  public listAlbumItems = async (\r\n    albumName: string,\r\n    page: number,\r\n    pageSize: number\r\n  ): Promise<PaginatedResult<string>> => {\r\n    /**\r\n     * List all images in the album\r\n     * @param albumName The album name\r\n     * @param page The page number\r\n     * @param pageSize The page size\r\n     * @returns A paginated result {page, pageSize, lastPage, data}\r\n     */\r\n    return S3ImageHosting.listAlbumItemsStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      albumName,\r\n      page,\r\n      pageSize\r\n    );\r\n  };\r\n\r\n  public albumAddImages = async (\r\n    albumName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Add images to the album\r\n     * @param albumName The album name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.albumAddImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      albumName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public albumRemoveImages = async (\r\n    albumName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Remove images from the album\r\n     * @param albumName The album name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.albumRemoveImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      albumName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public getAllTagNames = async (): Promise<string[]> => {\r\n    /**\r\n     * Get all tag names\r\n     * @returns An array of strings\r\n     */\r\n    return S3ImageHosting.getAllTagNamesStatic(\r\n      this.client,\r\n      this.settings.bucket\r\n    );\r\n  };\r\n\r\n  public addTag = async (tag: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Add tags\r\n     * @param tag The tag name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.addTagStatic(this.client, this.settings.bucket, tag);\r\n  };\r\n\r\n  public removeTag = async (tag: Array<string>): Promise<boolean> => {\r\n    /**\r\n     * Remove tags\r\n     * @param tag The tag name\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.removeTagStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tag\r\n    );\r\n  };\r\n\r\n  public listTagItems = async (\r\n    tagName: string,\r\n    page: number,\r\n    pageSize: number\r\n  ): Promise<PaginatedResult<string>> => {\r\n    /**\r\n     * List all images in the tag\r\n     * @param tagName The tag name\r\n     * @param page The page number\r\n     * @param pageSize The page size\r\n     * @returns A paginated result {page, pageSize, lastPage, data}\r\n     */\r\n    return S3ImageHosting.listTagItemsStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tagName,\r\n      page,\r\n      pageSize\r\n    );\r\n  };\r\n\r\n  public tagAddImages = async (\r\n    tagName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Add images to the tag\r\n     * @param tagName The tag name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.tagAddImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tagName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public tagRemoveImages = async (\r\n    tagName: string,\r\n    keys: string[]\r\n  ): Promise<boolean> => {\r\n    /**\r\n     * Remove images from the tag\r\n     * @param tagName The tag name\r\n     * @param keys The image keys\r\n     * @returns A boolean value\r\n     */\r\n    return S3ImageHosting.tagRemoveImagesStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      tagName,\r\n      keys\r\n    );\r\n  };\r\n\r\n  public listCratedAtItems = async (\r\n    page: number,\r\n    pageSize: number\r\n  ): Promise<PaginatedResult<string>> => {\r\n    /**\r\n     * List all images by creation date\r\n     * @param page The page number\r\n     * @param pageSize The page size\r\n     * @returns A paginated result {page, pageSize, lastPage, data}\r\n     */\r\n    return S3ImageHosting.listCratedAtItemsStatic(\r\n      this.client,\r\n      this.settings.bucket,\r\n      page,\r\n      pageSize\r\n    );\r\n  };\r\n}\r\n\r\nexport default S3ImageHosting;\r\n"],"names":[],"version":3,"file":"types.d.ts.map"}